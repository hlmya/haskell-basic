Recommended for use: the GHC documentation and Hoogle (Haskell API search). Please note that there are tasks that may depend on others, so it is recommended to define the functions in the order of their introduction in the text below. Each function must have exactly the same name and type as it is given, otherwise the solution will not be accepted. Place all the function definitions in a single source file and submit the contents here, in BE-AD. In addition to that, it is highly recommended to use the same source file for the development.

If you want to use the tests embedded into the description, add the following code snippet to the beginning of your source file:

import Control.DeepSeq
import Control.Exception
import System.IO.Unsafe
import Data.Char
import Data.Either
import Data.Function
import Data.List

x `raises` s = unsafePerformIO $
  either ((s ~=) . f) (const False) `fmap` (try $ evaluate $ force x)
  where
    f = show

    (~=) = isPrefixOf `on` (map toUpper . unwords . words)

allTests = (and (concatMap snd tests), tests)

tests =
  [ ("test_isLand", test_isLand)
  , ("test_hasSea", test_hasSea)
  , ("test_splitSegments", test_splitSegments)
  , ("test_islandCount", test_islandCount)
  , ("test_lengthOfIslands", test_lengthOfIslands)
  , ("test_hasIslandsOfSameLength", test_hasIslandsOfSameLength)
  , ("test_highestIsland", test_highestIsland)
  , ("test_hypotenuse", test_hypotenuse)
  , ("test_walkingDistance", test_walkingDistance)
  , ("test_fullWalkingDistance", test_fullWalkingDistance)
  ]
Summary of the task
We measured the metres above sea level of the surface of the Earth at certain points. The result of a measurement is an element of the type Measure. The constructor Land denotes a measurement above land. The constructor Sea denotes a measurement above sea.

data Measure
  = Land Int
  | Sea
  deriving (Show, Eq)
For the measurements above land the Int parameter denotes the metres above sea level. This is a positive integer number. 
For measurements above the sea, we don't have any parameters as the metres above sea level is 0 in these points.

The measurements are given in a list of Measure values.

type Measures = [Measure]
The results of a few measurements are given below.

testMeasures1 :: Measures
testMeasures1 = []

testMeasures2 :: Measures
testMeasures2 =
  [ Land 300, Land 200, Land 400, Sea, Sea, Land 300, Land 200, Land 150, Sea
  , Land 40, Land 80, Land 500, Land 650, Land 890, Land 300, Sea, Sea, Sea
  , Sea, Land 40 ]

testMeasures3 :: Measures
testMeasures3 =
  [ Sea, Sea, Sea, Land 50, Land 100, Land 10, Sea, Land 30, Land 80, Land 350
  , Land 700, Land 980, Land 600, Land 200, Land 40, Sea, Sea, Sea, Sea ]
Measurement above land (1 point)
Determine if a measurement was performed above land.

Test cases:

test_isLand = 
  [ isLand Sea       == False
  , isLand (Land 40) == True
  , isLand (Land 30) == True
  ]
Measurement above sea (1 point)
Determine if there were any measurements at all above sea.

Test cases:

test_hasSea =
  [ hasSea testMeasures1 == False
  , hasSea testMeasures2 == True
  , hasSea testMeasures3 == True
  ]
Detecting islands (2 points)
Split the sea from the islands. Tip: use the groupBy function.

Test cases:

test_splitSegments =
  [ splitSegments testMeasures1 == ([] :: [Measures])
  , splitSegments testMeasures2 == [ [Land 300,Land 200,Land 400]
                                   , [Sea,Sea]
                                   , [Land 300,Land 200,Land 150]
                                   , [Sea]
                                   , [Land 40,Land 80,Land 500,Land 650,Land 890,Land 300]
                                   , [Sea,Sea,Sea,Sea]
                                   , [Land 40]
                                   ]
  , splitSegments testMeasures3 == [ [Sea,Sea,Sea]
                                   , [Land 50,Land 100,Land 10]
                                   , [Sea]
                                   , [Land 30,Land 80,Land 350,Land 700,Land 980,Land 600,Land 200,Land 40]
                                   , [Sea,Sea,Sea,Sea]
                                   ]
  ]
Number of islands (2 points)
Determine the number of islands we encountered during the measurements.

Test cases:

test_islandCount =
  [ islandCount testMeasures1 == 0
  , islandCount testMeasures2 == 4
  , islandCount testMeasures3 == 2
  ]
Length of land segments (2 points)
Determine the lengths of the segments above lands.

Test cases:

test_lengthOfIslands =
  [ lengthOfIslands testMeasures1 == ([] :: [Int])
  , lengthOfIslands testMeasures2 == [3,3,6,1]
  , lengthOfIslands testMeasures3 == [3,8]
  ]
Islands of the same length (3 points)
Determine if there are two or more islands which have the same length. Tip: use the group function (among others).

Test cases:

test_hasIslandsOfSameLength =
  [ hasIslandsOfSameLength testMeasures1 == False
  , hasIslandsOfSameLength testMeasures2 == True
  , hasIslandsOfSameLength testMeasures3 == False
  ]
The island with the highest peak (5 points)
Determine the number of the island which has the highest peak. If there are no islands, return Nothing. The islands are numbered from 0. If there are more islands with a highest peak (of the same height), return the number of the first one.

Test cases:

test_highestIsland = 
  [ highestIsland testMeasures1 == (Nothing :: Maybe Int)
  , highestIsland testMeasures2 == Just 2
  , highestIsland testMeasures3 == Just 1
  ]
Length of the longest side of a right-angled triangle (1 point)
Knowing the two shorter sides of a right-angled triangle (a triangle which has a 90-degree angle), calculate the length of the longest side (called hypotenuse). If the two shorter sides are denoted aa and bb, the length of the hypotenuse can be calculated by the following formula.

\sqrt{(a^2 + b^2)}√
​(a
​2
​​ +b
​2
​​ )
​
​​ 

The result should be rounded to the closest integer.

Test cases:

test_hypotenuse =
  [ hypotenuse 500 0   == 500
  , hypotenuse 500 30  == 501
  , hypotenuse 130 350 == 373
  ]
Distance between neighbouring measurements (2 points)
Calculate the walking distance between two measurements. The first parameter is the distance between the two measurement points if we don't take the height into account. This is one of the shorter sides of a right-angled triangle. The other shorter side is the vertical distance between the two points. walkingDistance calculates the hypotenuse of this triangle, that is, how many meters one needs to walk if she starts in one measurement point and walks to the other.

Test cases:

test_walkingDistance =
  [ walkingDistance 500 Sea Sea               == 500
  , walkingDistance 500 Sea (Land 100)        == 510
  , walkingDistance 500 (Land 100) (Land 660) == 751
  ]
Distance of full walk (3 points)
fullWalkingDistance calculates the length of the full walk. In this case the distance between the different measurements is always the same, this value is the first parameter of the function.

Test cases:

test_fullWalkingDistance =
  [ fullWalkingDistance 500 testMeasures1 == 0
  , fullWalkingDistance 500 testMeasures2 == 10398
  , fullWalkingDistance 500 testMeasures3 == 9561
  ]