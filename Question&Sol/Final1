General Information
Recommended for use: the GHC documentation, Hoogle (Haskell API search) and list of common functions. Please note that there are tasks that may depend on others, so it is recommended to define the functions in the order of their introduction in the text below. Each function must have exactly the same name and type as it is given, otherwise the solution will not be accepted. Place all the function definitions in a single source file and submit the contents here, in BE-AD. In addition to that, it is highly recommended to use the same source file for the development.

If you want to use the tests embedded into the description, add the following code snippet to the beginning of your source file:

import Data.List hiding (insert)
import Data.Char

{-

allTests = (and (concatMap snd tests), tests)

tests =
  [ ("test_fromList", test_fromList)
  , ("test_right", test_right)
  , ("test_left", test_left)
  , ("test_toList", test_toList)
  , ("test_get", test_get)
  , ("test_insert", test_insert)
  , ("test_skip", test_skip)
  , ("test_isPrefix", test_isPrefix)
  , ("test_match", test_match)
  , ("test_elemDistance", test_elemDistance)
  , ("test_closer", test_closer)
  , ("test_modify", test_modify)
  , ("test_replace", test_replace)
  ]

-}
Overview
Iterator is a data structure that allows traversal of a list. An iterator has a position in the list, and it can move one step to the right (next element) or to the left (previous element). This is more efficient than indexing because indexing traverses the list from the beginning every time.

We restrict ourselves to [Char]s but the idea can be applied to every type of lists.

Iterator representation
An iterator breaks a list into two parts. Left part has the already iterated elements. Right part has the current element and yet-to-be-iterated elements. If we are at the letter 'c' in the following list:

['a','b','c','d','e']
then the iterator looks like the following:

['b','a'] ['c','d','e']
            ^ current element
That is, we already visited 'a' and then 'b'. The current element is 'c', and the list of yet-to-be-visited elements is ['d', 'e']. The left part is in reversed order: this allows efficient moving to left and right in the list.

We can move one step to the right:

['c','b','a'] ['d','e']
                ^ current element
So we moved past 'c', and 'd' became the current element.

The iterator is defined as:

data Iterator = It [Char] [Char]
  deriving (Eq, Show)
Grade 2
Positioning to the first element
Construct an iterator from a list. The current element should be the first element of the list.

fromList :: [Char] -> Iterator
Test cases:

test_fromList = [
   fromList ['a', 'b', 'c', 'd']                == It [] ['a', 'b', 'c', 'd']
 , fromList ['h', 'e', 'l', 'l', 'o']           == It [] ['h', 'e', 'l', 'l', 'o']
 , fromList ['o', 'n', 'e', ' ', 't', 'w', 'o'] == It [] ['o', 'n', 'e', ' ', 't', 'w', 'o']
 ]
Moving to the right
Move one step to the right. The current element should be put to beginning of the left part (already visited elements).

When the iterator reached the end (right part is empty), it should return the iterator unchanged.

right :: Iterator -> Iterator
Test cases:

test_right = [
   right (It [] ['a', 'b', 'c', 'd'])                                 == (It ['a'] ['b', 'c', 'd'])
 , right (right (It [] ['a', 'b', 'c', 'd']))                         == (It ['b', 'a'] ['c', 'd'])
 , right (right (right (It [] ['a', 'b', 'c', 'd'])))                 == (It ['c', 'b', 'a'] ['d'])
 , right (right (right (right (It [] ['a', 'b', 'c', 'd']))))         == (It ['d', 'c', 'b', 'a'] [])  -- reached the end of the list
 , right (right (right (right (right (It [] ['a', 'b', 'c', 'd']))))) == (It ['d', 'c', 'b', 'a'] [])
 , right (It [] [])    == It [] []
 , right (It ['a'] []) == It ['a'] []
 ]
Moving to the left
Similarly to right, we can move to the left. It should take the first element of the left part (elements already visisted) and put it into the front of the right part (elements yet to be visited).

When the iterator reached the front of the list (the left part is empty), it should return the iterator unchanged.

left :: Iterator -> Iterator
Test cases:

test_left = [
   left (It ['d', 'c', 'b', 'a'] [])                             == It ['c', 'b', 'a'] ['d']
 , left (left (It ['d', 'c', 'b', 'a'] []))                      == It ['b', 'a'] ['c', 'd']
 , left (left (left (It ['d', 'c', 'b', 'a'] [])))               == It ['a'] ['b', 'c', 'd']
 , left (left (left (left (It ['d', 'c', 'b', 'a'] []))))        == It [] ['a', 'b', 'c', 'd'] -- reached the front of the list
 , left (left (left (left (left (It ['d', 'c', 'b', 'a'] []))))) == It [] ['a', 'b', 'c', 'd']
 , left (It [] [])    == It [] []
 , left (It ['a'] []) == It [] ['a']
 ]
List reconstruction
Return the complete list inside an iterator. The left part should be followed by the right part. The left part should be reversed.

toList :: Iterator -> [Char]
Test cases:

test_toList = [
   toList (It [] ['h', 'e', 'l', 'l', 'o']) == ['h', 'e', 'l', 'l', 'o']
 , toList (It ['h'] ['e', 'l', 'l', 'o'])   == ['h', 'e', 'l', 'l', 'o']
 , toList (It ['e', 'h'] ['l', 'l', 'o'])   == ['h', 'e', 'l', 'l', 'o']
 , toList (It ['o', 'l', 'l', 'e', 'h'] []) == ['h', 'e', 'l', 'l', 'o']
 , toList (It [] []) == []
 ]
Element retrieval
Return the current element. If there is no current element (empty right part), return Nothing

get :: Iterator -> Maybe Char
Test cases

test_get = [
   get (It [] ['h', 'e', 'l', 'l', 'o']) == Just 'h'
 , get (It ['h'] ['e', 'l', 'l', 'o'])   == Just 'e'
 , get (It ['e', 'h'] ['l', 'l', 'o'])   == Just 'l'
 , get (It ['o', 'l', 'l', 'e', 'h'] []) == Nothing
 , get (It [] [])                        == Nothing
 ]
Element insertion
Insert a new element in front of the current element.

insert :: Char -> Iterator -> Iterator
Test cases:

test_insert = [
   insert 'c' (It [] ['a', 'r']) == It [] ['c', 'a', 'r']
 , insert 'e' (It ['n', 'o'] []) == It ['n', 'o'] ['e']
 , toList (insert 'e' (right (right (fromList ['o', 'n']))))          == ['o', 'n', 'e']
 , insert 'e' (It ['c', 'x', 'e'] ['l', 'l', 'e', 'n', 't'])          == (It ['c','x','e'] ['e','l', 'l', 'e', 'n', 't'])
 , toList (insert 'e' (It ['c', 'x', 'e'] ['l', 'l', 'e', 'n', 't'])) == ['e','x','c','e','l', 'l', 'e', 'n', 't']
 ]
Skipping elements
Skip n number of elements.

If n is zero then return the iterator unchanged.
If n is positive, make one step to the right and skip n - 1 more elements.
If n is negative, make one step to the left and skip n + 1 more elements.
skip :: Int -> Iterator -> Iterator
Test cases:

test_skip = [
   skip 0 (It [] ['h', 'e', 'l', 'l', 'o'])     == It [] ['h', 'e', 'l', 'l', 'o']
 , skip 1 (It [] ['h', 'e', 'l', 'l', 'o'])     == It ['h'] ['e', 'l', 'l', 'o']
 , skip 2 (It [] ['h', 'e', 'l', 'l', 'o'])     == It ['e', 'h'] ['l', 'l', 'o']
 , skip 3 (It [] ['h', 'e', 'l', 'l', 'o'])     == It ['l', 'e', 'h'] ['l', 'o']
 , skip 20 (It [] ['h', 'e', 'l', 'l', 'o'])    == It ['o', 'l', 'l', 'e', 'h'] []
 , skip (- 1) (It [] ['h', 'e', 'l', 'l', 'o']) == It [] ['h', 'e', 'l', 'l', 'o']
 , skip (- 2) (It [] ['h', 'e', 'l', 'l', 'o']) == It [] ['h', 'e', 'l', 'l', 'o']
 , skip (- 1) (It ['l', 'e', 'h'] ['l', 'o'])   == It ['e', 'h'] ['l', 'l', 'o']
 , skip (- 2) (It ['l', 'e', 'h'] ['l', 'o'])   == It ['h'] ['e', 'l', 'l', 'o']
 , skip (- 3) (It ['l', 'e', 'h'] ['l', 'o'])   == It [] ['h', 'e', 'l', 'l', 'o']
 , skip (- 4) (It ['l', 'e', 'h'] ['l', 'o'])   == It [] ['h', 'e', 'l', 'l', 'o']
 , skip (- 20) (It ['l', 'e', 'h'] ['l', 'o'])  == It [] ['h', 'e', 'l', 'l', 'o']
 , skip 0 (It [] [])                            == It [] []
 , skip 2 (It [] [])                            == It [] []
 ]
Extra exercise
You have to complete this exercise if you failed the midterm exam #2.

Find the index of a character in the right part of the iterator that satisfies a predicate.

If there is no such element, return Nothing.

Number the characters, and filter then using a given function.
If the filtered list is empty, return Nothing.
Otherwise, wrap the first index using `Just.
suchThat :: (Char -> Bool) -> Iterator -> Maybe Int
Test cases:

test_suchThat = [
   suchThat (== 'o') (It ['l', 'e', 'h'] ['l', 'o']) == Just 1
 , suchThat isUpper (It ['l', 'e', 'h'] ['l', 'o', 'X', 'D']) == Just 2
 , suchThat isUpper (It ['l', 'e', 'h'] ['l', 'o']) == Nothing
 ]
Grade 3
Prefix test
Test that a string is a prefix of the right part.

It should check elementwise equality of characters.
When the first mismatching character is found, return False.
When the end of the string (1st argument) is reached, return False.
Test cases:

test_isPrefix = [
   isPrefix "he"  (It [] ['h', 'e', 'l', 'l', 'o'])   == True
 , isPrefix "hel" (It [] ['h', 'e', 'l', 'l', 'o'])   == True
 , isPrefix "el"  (It [] ['h', 'e', 'l', 'l', 'o'])   == False
 , isPrefix "ehe" (It [] ['h', 'e', 'l', 'l', 'o'])   == False
 , isPrefix "lo"  (It ['l', 'e', 'h'] ['l', 'o'])     == True
 , isPrefix "he"  (It ['l', 'e', 'h'] ['l', 'o'])     == False
 , isPrefix "o"  (It ['o', 'l', 'l', 'e', 'h'] [])    == False
 , isPrefix "hello" (It [] [])                        == False
 , isPrefix ""      (It [] [])                        == True
 ]
String matching
Test that a string matches a part in of a list characters.

Convert the list of characters into an iterator.
Test that the string matches at the current position (isPrefix).
If it does, return True, otherwise step to the right and test match again.
When the iterator is at the end, return False.
match :: String -> [Char] -> Bool
Test cases:

test_match = [
   match "h" ['h', 'e', 'l', 'l', 'o']     == True
 , match "he" ['h', 'e', 'l', 'l', 'o']    == True
 , match "hello" ['h', 'e', 'l', 'l', 'o'] == True
 , match "" ['h', 'e', 'l', 'l', 'o']      == True
 , match "lo" ['h', 'e', 'l', 'l', 'o']    == True
 , match "ell" ['h', 'e', 'l', 'l', 'o']   == True
 , match "ela" ['h', 'e', 'l', 'l', 'o']   == False
 , match "hal" ['h', 'e', 'l', 'l', 'o']   == False
 , match "loop" ['h', 'e', 'l', 'l', 'o']  == False
 , match "h" []                            == False
 , match "h" ['p']                         == False
 ]
Grade 4
Finding an element
Find a character in the list inside an iterator. elemIndex should return a positive integer n if we have to step n times forward (to the right) to reach the character.

It should return a negative integer if we have to step backward (to the left).

It should search in the right part first.

It should return Nothing if the character is not in the list.

Hint:

the function should number the characters: the right part from 0 to \infty∞ and the left part from -1 to -\infty−∞.

It should collect all indices of the given character.

If the list of indices is empty, return Nothing, otherwise the first index wrapped in with a Just.

elemDistance :: Char -> Iterator -> Maybe Int
Test cases:

test_elemDistance = [
   elemDistance 'e' (It ['h'] ['e', 'l', 'l', 'o']) == Just 0
 , elemDistance 'l' (It ['h'] ['e', 'l', 'l', 'o']) == Just 1
 , elemDistance 'o' (It ['h'] ['e', 'l', 'l', 'o']) == Just 3
 , elemDistance 'h' (It ['h'] ['e', 'l', 'l', 'o']) == Just (- 1)
 , elemDistance 'X' (It ['h'] ['e', 'l', 'l', 'o']) == Nothing
 , elemDistance 'a' (It ['a','h'] ['h', 'a'])       == Just 1
 , elemDistance 'a' (It [] [])                      == Nothing
 , elemDistance 'o' (It ['e', 'n', 'o'] [])         == Just (- 3)
 ]
Closer element
Return the character out of two characters that is closer to the currect position.

We assume that both characters are in the list.

Hint:

Use the above elemDistance and compare the distances inside Just.

When distances are equal, return the character of positive distance.

Distances could be negative. Use abs.

closer :: Char -> Char -> Iterator -> Char
Test cases:

test_closer = [
   closer 'e' 'h' (It ['h'] ['e', 'l', 'l', 'o'])   == 'e'
 , closer 'h' 'o' (It ['h'] ['e', 'l', 'l', 'o'])   == 'h'
 , closer 'h' 'l' (It ['h'] ['e', 'l', 'l', 'o'])   == 'l'
 , closer 'a' 'a' (It ['a','h'] ['h', 'a'])         == 'a'
 ]
Grade 5
Element modification
Modify the current element using a function.

If the iterator is empty or it is at the end of the list then it should be returned unchanged.
If the function returns Just x then the current element should be replaced by x.
If the function returns Nothing then the current element should be removed from the list.
modify :: (Char -> Maybe Char) -> Iterator -> Iterator
Test cases:

test_modify = [
   modify (\c -> Just (toLower c)) (It [] ['A'])                            == (It [] ['a'])
 , modify (\c -> Just (toUpper c)) (It ['e','h'] ['l','l','o'])             == It ['e','h'] ['L','l','o']
 , modify (\c -> Just (toUpper c)) (It ['l','e', 'k', 's', 'a', 'h'] ['l']) == It ['l','e', 'k', 's', 'a', 'h'] ['L']
 , modify (\c -> Nothing) (It ['e','h'] ['l','l','o'])                      == It ['e','h'] ['l','o']
 , modify (\c -> Nothing) (It ['l','e', 'k', 's', 'a', 'h'] ['l'])          == It ['l','e', 'k', 's', 'a', 'h'] []
 , toList (modify (\c -> Nothing) (It ['e','h'] ['l','l','o']))             == ['h','e','l','o']
 , toList (modify (\c -> Nothing) (It ['l','e', 'k', 's', 'a', 'h'] ['l'])) == ['h', 'a', 's', 'k', 'e', 'l']
 , modify (\c -> Just (toUpper c)) (It ['o', 'n', 'e'] [])                  == It ['o', 'n', 'e'] []
 , modify (\c -> Nothing) (It ['o', 'n', 'e'] [])                           == It ['o', 'n', 'e'] []
 , modify (\c -> Just (toUpper c)) (It [] [])                               == It [] []
 ]
Replacing the current element
Replace the current element using modify.

replace :: Char -> Iterator -> Iterator
Test cases:

test_replace = [
   replace 'Z' (It [] ['a']) == It [] ['Z']
 , replace 'Z' (It ['a'] []) == It ['a'] []
 , replace 'd' (It [] ['m', 'a', 'd'])                     == It [] ['d','a', 'd']
 , toList (replace 't' (right (fromList ['a', 'p', 'e']))) == ['a', 't', 'e']
 ]